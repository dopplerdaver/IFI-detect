/**********************************************************************
 * TDRP params for RadiaParams
 **********************************************************************/

//======================================================================
//
// RadiaFilt.
//
// This program does the RaDIA algorithms.
//
//======================================================================
 
///////////// fixed_const /////////////////////////////
//
// Fixed constant strings that are interpreted by user functions.
//
//
// Type: string
// 1D array - variable length.
//

fixed_const = {
};

///////////// user_data ///////////////////////////////
//
// Non gridded data names.
//
//
// Type: string
// 1D array - variable length.
//

user_data = {
};

///////////// volume_before_filter ////////////////////
//
// Volume Filters to apply before the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_before_filter = {
};

///////////// filter //////////////////////////////////
//
// Filters (sweep) to apply.
//
//
// Type: string
// 1D array - variable length.
//

filter = {
 "correctedZDR = ZDR + 4.3",
 "MaskZDR = mask_missing_to_missing(correctedZDR, Mask)",
 "MeanZDR = smooth(MaskZDR, 15, 5)",
 "MaskDBZ = mask_missing_to_missing(DBZ, Mask)",
 "MeanDBZ = smoothDBZ(MaskDBZ, 15, 5)",
 "TDBZ = TextureX(MaskDBZ, 15, 5)",
 "sdevDBZ = stddev(MaskDBZ, 15, 5)",
 "blockSdevDBZ = stddev_no_overlap(sdevDBZ, 100, 90)",
 "blockMedianDBZ = median_no_overlap(sdevDBZ, 94, 360, -20, 50, 0.2)",
 "Interest_sdevDBZ = fuzzy(sdevDBZ, -32,1, 1,1, 2.5,0, 20,0)",
 "Interest_TDBZ =  fuzzy(TDBZ, -32,1, 1,1,  6,0, 124,0)",
 "Interest_MeanDBZ = fuzzy(MeanDBZ, -32,0, -18,0, -10,1, 5,1, 8, 0, 40,0)",
 "Interest_blockSdevDBZ = fuzzy(blockSdevDBZ, 0,1, 1.5,1, 2,0, 4,0)",
 "Interest_blockMedianDBZ = fuzzy(blockMedianDBZ, 0,1, 3,1, 4.5,0, 8,0)",
 "FRZDRZ_full = average(5, Interest_sdevDBZ, Interest_TDBZ, Interest_MeanDBZ, Interest_blockSdevDBZ, Interest_blockMedianDBZ)",
 "FRZDRZ = mask_missing_to_missing(FRZDRZ_full, MaskDBZ)",
 "if (MeanZDR > 0.5) then (FRZDRZ = 0.0)",
 "if (PID_TEMP > 0.1) then (FRZDRZ = 0.0)",

 "sdevZDR = stddev(MaskZDR, 15, 5)",
 "MaskKDP = mask_missing_to_missing(KDP, Mask)",
 "sdevKDP = stddev(MaskKDP, 15, 5)",
 "MeanKDP = smooth(MaskKDP, 15, 5)",
 "Interest_correctedMeanZDR = fuzzy(MeanZDR, -3, 1, 0.1, 1, 0.25, 0, 5, 0)",
 "Interest_sdevZDR = fuzzy(sdevZDR, -3, 1, 0.15, 1, 0.35, 0, 2, 0)",
 "Interest_MeanKDP = fuzzy(MeanKDP, -11, 1, 0.02, 1, 0.07, 0, 3, 0)",
 "Interest_sdevKDP = fuzzy(sdevKDP, -11, 1, 0.1, 1, 0.2, 0, 6, 0)",
 "SLW_full = average(10, Interest_sdevZDR, Interest_MeanKDP, Interest_sdevKDP, Interest_correctedMeanZDR)",
 "SLW_full0 = mask_missing_to_missing(SLW_full, ZDR)",
 "SLW = mask_missing_to_missing(SLW_full0, MaskKDP)",

 "MeanZDR_MIXPHA = trapezoid(MeanZDR, 0, 1, 3, 4)",
 "MeanDBZ_MIXPHA = trapezoid(MeanDBZ, 0, 10, 30, 40)",
 "TEMP_MIXPHA = trapezoid(PID_TEMP, -22, -18, -12, -8)",
 "MIXPHA_full = weighted_average(10, MeanZDR_MIXPHA, 1.0, MeanDBZ_MIXPHA, 1.0, TEMP_MIXPHA, 1.0)",
 "MIXPHA_full0 = mask_missing_to_missing(MIXPHA_full, ZDR)",
 "MIXPHA = mask_missing_to_missing(MIXPHA_full0, MaskDBZ)",

 "MeanZDR_PLATES = s_remap(MeanZDR, 3, 4)",
 "MeanDBZ_PLATES = trapezoid(MeanDBZ, -15, -10, 10, 15)",
 "TEMP_PLATES = trapezoid(PID_TEMP, -45, -38, -4, 0)",
 "PLATES_full = weighted_average(10, MeanZDR_PLATES, 1.0, MeanDBZ_PLATES, 1.0, TEMP_PLATES, 1.0)",
 "PLATES_full0 = mask_missing_to_missing(PLATES_full, DBZ)",
 "PLATES = mask_missing_to_missing(PLATES_full0, MaskZDR)",

 "RADIA2 = -0.1",
 "if (MeanDBZ >= -31) then (RADIA2 = 0.3)",
 "if (FRZDRZ <= 0.7  && SLW <=  0.55 && MIXPHA <= 0.85 && FRZDRZ > 0.45 && SLW > 5 && MIXPHA > 0.45) then (RADIA2 = 0.5)",
 "if (FRZDRZ <= 0.45 && SLW <= 0.45 && MIXPHA <= 0.45) then (RADIA2 = 0.0)",
 "if (SLW > 0.55 && FRZDRZ > 0.70  && MIXPHA > 0.85) then (RADIA2 = 1.1)",
 "if (SLW <= 0.55 && FRZDRZ > 0.70 && MIXPHA <= 0.85) then (RADIA2 = 0.8)",
 "if (SLW <= 0.55 && FRZDRZ <= 0.70 && MIXPHA > 0.85) then (RADIA2 = 0.6)",
 "if (SLW > 0.55 && FRZDRZ <= 0.70 && MIXPHA <= 0.85) then (RADIA2 = 1.0)",
 "if (FRZDRZ > 0.70 && MIXPHA > 0.85) then (RADIA2 = 0.7)",
 "if (FRZDRZ > 0.70 && SLW > 0.55) then (RADIA2 = 0.9)",
 "if (PLATES > 0.7) then (RADIA2 = 0.1)",
 "if (Mask = missing) then (RADIA2 = 0.0)"
};

///////////// volume_after_filter /////////////////////
//
// Volume Filters to apply after the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_after_filter = {
};

///////////// input_soundings_internal_name ///////////
//
// Internal Name of soundings input data in virtvol param file, or empty 
//   for none.
//
//
// Type: string
//

input_soundings_internal_name = "";

///////////// output_soundings_internal_name //////////
//
// Internal Name of adjusted soundings output data in virtvol param 
//   file, or empty for none.
//
//
// Type: string
//

output_soundings_internal_name = "";

///////////// freezing_height_internal_name ///////////
//
// Internal Name of freezing height data in virtvol param file, or empty 
//   for none.
//
//
// Type: string
//

freezing_height_internal_name = "";

///////////// histo2d_name ////////////////////////////
//
// Internal Name of 2d histogram data, or empty for none (output of 
//   Histo2d).
//
//
// Type: string
//

histo2d_name = "";

///////////// temp_profile ////////////////////////////
//
// temp profile params.
//
// wavelength_cm = default to use when override is TRUE, or no info
// override_wavelength = FALSE to get from data, TRUE to set from param
// radar_height_km = default to use when override is TRUE, or no info
// override_radar_height = FALSE to get from data, TRUE to set from 
//   param
// use_soundings = TRUE to read from input source, FALSE to use hardwire
// sounding_check_pressure_monotonically_decreasing = TRUE to reject if 
//   not
// sounding_required_pressure_range_hpa =range that is valid, reject if 
//   notnsounding_required_height_range_m =range that is valid, reject if 
//   not.
//
//
// Type: struct
//   typedef struct {
//      double wavelength_cm;
//      boolean override_wavelength;
//      double radar_height_km;
//      boolean override_radar_height;
//      boolean use_soundings;
//      string soundings_name;
//      boolean sounding_check_pressure_monotonically_decreasing;
//      double sounding_required_pressure_range_hpa_min;
//      double sounding_required_pressure_range_hpa_max;
//      double sounding_required_height_range_m_min;
//      double sounding_required_height_range_m_max;
//   }
//
//

temp_profile = {
    wavelength_cm = 0,
    override_wavelength = FALSE,
    radar_height_km = 0,
    override_radar_height = FALSE,
    use_soundings = FALSE,
    soundings_name = "not_set",
    sounding_check_pressure_monotonically_decreasing = FALSE,
    sounding_required_pressure_range_hpa_min = 0,
    sounding_required_pressure_range_hpa_max = 0,
    sounding_required_height_range_m_min = 0,
    sounding_required_height_range_m_max = 0
};

///////////// kdp_compute_parmfile ////////////////////
//
// Kdp computation parameter file name.
//
//
// Type: string
//

kdp_compute_parmfile = "none";

///////////// pid_compute_parmfile ////////////////////
//
// Pid computation parameter file name.
//
//
// Type: string
//

pid_compute_parmfile = "none";

/**********************************************************************
 * TDRP params for AlgorithmParams
 **********************************************************************/

//======================================================================
//
// Algorithm Parameters.
//
// Parameters used to run the Algorithm class.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// instance.
//
// for PMU.
//
//
// Type: string
//

instance = "Radia_$(INSTANCE)_$(RADAR)";

///////////// debug_mode //////////////////////////////
//
// debugging mode.
//
// NONE=as quiet as possible, DEBUG = minimal debug output, 
//   DEBUG_VERBOSE=more.
//
//
// Type: enum
// Options:
//     NONE
//     DEBUG
//     DEBUG_VERBOSE
//

debug_mode = DEBUG;

///////////// debug_threads ///////////////////////////
//
// threads debug.
//
// set to TRUE to debug threading.
//
//
// Type: boolean
//

debug_threads = FALSE;

///////////// num_threads /////////////////////////////
//
// Number of threads.
//
// Threading is done on sweeps. (More than one sweep processed by 
//   individual threads).  Set to 1 or 0 for no threading.
//
//
// Type: int
//

num_threads = 10;

///////////// input ///////////////////////////////////
//
// Inputs to the algorithm.
//
// Names of the fields that are inputs to the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

input = {
 "DBZ",
 "KDP",
 "ZDR",
 "PID_TEMP",
 "Mask"
};

///////////// output //////////////////////////////////
//
// Fields/values to export from the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

output = {
 "FRZDRZ",
 "SLW",
 "MIXPHA",
 "PLATES",
 "RADIA2"
};

/**********************************************************************
 * TDRP params for VirtVolParams
 **********************************************************************/

//======================================================================
//
// VirtVol Parameters.
//
// Triggering new data, reading in new data, writing data.
//
//======================================================================
 
///////////// debug_triggering ////////////////////////
//
// triggering debug.
//
// set to TRUE to debug triggering.
//
//
// Type: boolean
//

debug_triggering = FALSE;

///////////// trigger_url /////////////////////////////
//
// trigger url.
//
// URL to trigger off.
//
//
// Type: string
//

trigger_url = "mdvp:://localhost::$(PROJECT)/$(VSN)/$(RADAR)/mdv/pidMask";

///////////// restrict_vertical_levels ////////////////
//
// Set TRUE to restrict vertical levels to a range of values, FALSE to 
//   use all the vertical levels.
//
//
// Type: boolean
//

restrict_vertical_levels = TRUE;

///////////// vertical_level_range ////////////////////
//
// If restrict_vertical_levels = TRUE, this is the range of vlevels.
//
// If set to -1, -1 it is not used, and there is no restriction.
//
//
// Type: double
// 1D array - fixed length - 2 elements.
//

vertical_level_range = {
 0,
 6.5
};

///////////// virtvol_input ///////////////////////////
//
// inputs.
//
// The fields read in externally
// internal_name = name used in filtering
// external_name = external field name.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_input = {
  {
    internal_name = "DBZ",
    external_name = "$(DBZ_FIELD_NAME)",
    url = "mdvp:://$(RADAR_DATA_HOST)::mdv/radar/$(RADAR)/polar",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "ZDR",
    external_name = "$(ZDR_FIELD_NAME)",
    url = "mdvp:://$(RADAR_DATA_HOST)::mdv/radar/$(RADAR)/polar",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "KDP",
    external_name = "KDP",
    url = "mdvp:://localhost::$(PROJECT)/$(VSN)/$(RADAR)/mdv/pidMask",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "PID_TEMP",
    external_name = "PID_TEMP",
    url = "mdvp:://localhost::$(PROJECT)/$(VSN)/$(RADAR)/mdv/pidMask",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "Mask",
    external_name = "Mask",
    url = "mdvp:://localhost::$(PROJECT)/$(VSN)/$(RADAR)/mdv/pidMask",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
};

///////////// virtvol_output //////////////////////////
//
// Fields/values to write out.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_output = {
  {
    internal_name = "FRZDRZ",
    external_name = "FRZDRZ",
    url = "$(RAP_DATA_DIR)/$(PROJECT)/$(VSN)/$(RADAR)/mdv/frzdrz",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "SLW",
    external_name = "SLW",
    url = "$(RAP_DATA_DIR)/$(PROJECT)/$(VSN)/$(RADAR)/mdv/slw",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "MIXPHA",
    external_name = "MIXPHA",
    url = "$(RAP_DATA_DIR)/$(PROJECT)/$(VSN)/$(RADAR)/mdv/mixpha",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "PLATES",
    external_name = "PLATES",
    url = "$(RAP_DATA_DIR)/$(PROJECT)/$(VSN)/$(RADAR)/mdv/plates",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "RADIA2",
    external_name = "RADIA2",
    url = "$(RAP_DATA_DIR)/$(PROJECT)/$(VSN)/$(RADAR)/mdv/radia2",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
};

